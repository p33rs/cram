<?php

use Illuminate\Auth\UserTrait;
use Illuminate\Auth\Reminders\RemindableTrait;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\File\File;

class Photo extends Eloquent {

    const UPLOADS_DIR = 'uploads';

    public function getUser()
    {
        return $this->belongsTo('User', 'user');
    }

    public function getLikers()
    {
        return $this->belongsToMany('User', 'likes', 'photo', 'user');
    }

    public function getComments()
    {
        return $this->hasMany('Comment', 'photo');
    }

    public function getPath()
    {
        return self::upload_path($this->filename);
    }

    public function getMimeType()
    {
        $file = new File($this->getPath());
        return $file->getMimeType();
    }

    /**
     * @todo this shouldn't be static; there are probably laravel best practices here
     * @param UploadedFile $file
     * @return string filename that was generated by the save
     */
    public static function persist(UploadedFile $file)
    {
        $filename = self::hash($file);
        $file->move(
            self::upload_path(),
            $filename
        );
        return $filename;
    }

    public static function hash(UploadedFile $file)
    {
        $hash = md5_file($file->getPath());
        // If this hash happens to be taken, just make one up
        while (file_exists(self::upload_path($hash))) {
            $hash = md5(uniqid(rand(), true));
        }
        return $hash;
    }

    public static function upload_path($file = '')
    {
        return base_path(self::UPLOADS_DIR) . ($file ? ( '/' . $file ) : '');
    }

}
